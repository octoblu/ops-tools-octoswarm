#!/bin/bash

SCRIPT_NAME="octoswarm"
STACK_CONFIG_PATH="$PWD/cluster.json"

read -r -d '' DANGER << "EOF"
DANGER! DANGER! DANGER! DANGER! DANGER!
               uuuuuuu
           uu$$$$$$$$$$$uu
        uu$$$$$$$$$$$$$$$$$uu
       u$$$$$$$$$$$$$$$$$$$$$u
      u$$$$$$$$$$$$$$$$$$$$$$$u
     u$$$$$$$$$$$$$$$$$$$$$$$$$u
     u$$$$$$$$$$$$$$$$$$$$$$$$$u
     u$$$$$$"   "$$$"   "$$$$$$u
     "$$$$"      u$u       $$$$"
      $$$u       u$u       u$$$
      $$$u      u$$$u      u$$$
       "$$$$uu$$$   $$$uu$$$$"
        "$$$$$$$"   "$$$$$$$"
          u$$$$$$$u$$$$$$$u
           u$"$"$"$"$"$"$u
uuu        $$u$ $ $ $ $u$$       uuu
u$$$$        $$$$$u$u$u$$$       u$$$$
$$$$$uu      "$$$$$$$$$"     uu$$$$$$
u$$$$$$$$$$$uu    """""    uuuu$$$$$$$$$$
$$$$"""$$$$$$$$$$uuu   uu$$$$$$$$$"""$$$"
"""      ""$$$$$$$$$$$uu ""$"""
         uuuu ""$$$$$$$$$$uuu
u$$$uuu$$$$$$$$$uu ""$$$$$$$$$$$uuu$$$
$$$$$$$$$$""""           ""$$$$$$$$$$$"
 "$$$$$"                      ""$$$$""
   $$$"                         $$$$"
EOF

usage(){
  echo "USAGE: $SCRIPT_NAME <subcommand>"
  echo 'Description: swarms of octos!'
  echo ''
  echo 'Arguments:'
  echo '  -h, --help        print this help text'
  echo '  -v, --version     print the version'
  echo '  -u, --upgrade     upgrade to the latest version of octoswarm'
  echo 'Environment:'
  echo '  DEBUG             print debug output'
}

version(){
  local directory
  directory="$(script_directory)"

  if [ -f "${directory}/VERSION" ]; then
    cat "${directory}/VERSION"
  else
    echo "unknown-version"
  fi
}

script_directory(){
  local source="${BASH_SOURCE[0]}"
  local dir=""

  while [ -h "$source" ]; do # resolve $source until the file is no longer a symlink
    dir="$( cd -P "$( dirname "$source" )" && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done

  dir="$( cd -P "$( dirname "$source" )" && pwd )"

  echo "$dir"
}

fatal() {
  local message="$@"
  errecho "Error: $message"
  exit 1
}

errecho() {
  local message="$@"
  (>&2 echo -e "$message")
}

assert_cluster_json() {
  if [ ! -f "$STACK_CONFIG_PATH" ]; then
    fatal "octoswarm must be run in a folder with a cluster.json"
  fi
}

assert_required_config() {
  local docker_version
  docker_version="$(get_docker_version)"
  if [ "$docker_version" == "null" ]; then
    fatal "octoswarm docker version not specified, exiting."
  fi
}

assert_required_env() {
  if [ -z "$OCTOSWARM_GITHUB_API_TOKEN" ]; then
    fatal "Missing required env OCTOSWARM_GITHUB_API_TOKEN"
  fi
}

assert_versions() {
  local docker_version="$1"
  local latest_version="$2"
  if [ -z "$docker_version" ] || [ "$docker_version" == "null" ]; then
    fatal "Missing '.octoswarm.dockerVersion' in cluster.json"
  fi
  if [ -z "$latest_version" ] || [ "$latest_version" == "null" ]; then
    fatal "Unable to retrieve latest version of octoswarm"
  fi
}

get_docker_version() {
  jq --raw-output '.octoswarm.dockerVersion' "$STACK_CONFIG_PATH"
}

get_binary_name() {
  local docker_version
  docker_version="$(get_docker_version)"
  echo "octoswarm-$docker_version"
}

get_whalebrew_image() {
  local docker_version
  local latest_version
  docker_version="$(get_docker_version)"
  latest_version="$(get_latest_version)"
  assert_versions "$docker_version" "$latest_version"
  echo "octoblu/octoswarm:$docker_version-$latest_version"
}

get_latest_version() {
  curl --fail --silent "https://sqrtofsaturn:$OCTOSWARM_GITHUB_API_TOKEN@api.github.com/repos/octoblu/octoswarm/releases/latest" | jq --raw-output '.tag_name'
}

require_clean_work_tree () {
  # Update the index
  git update-index -q --ignore-submodules --refresh
  err=0

  error=""
  # Disallow unstaged changes in the working tree
  if ! git diff-files --quiet --ignore-submodules --
  then
      error+="$DANGER"
      error+=$'\n\nWARNING!!!! You have unstaged changes.\n'
      error+=$(git diff-files --name-status -r --ignore-submodules --)
      err=1
  fi

  # Disallow uncommitted changes in the index
  if ! git diff-index --cached --quiet HEAD --ignore-submodules --
  then
      error+=$'\n\nWARNING!!!! Your index contains uncommitted changes.\n'
      error+=$(git diff-index --cached --name-status -r --ignore-submodules HEAD --)
      err=1
  fi

  if [ $err = 1 ]
  then
      error+=$'\n\nPlease commit or stash them.\n'
      lulz "$error"
  fi
}

lulz() {
  lulcat=$(which lolcat)
  if [ "$lulcat" == "" ]; then
    echo "$1" >&2
  else
    echo "$1" | lolcat >&2
  fi
}

main() {
  local upgrade
  case "$1" in
    -h | --help)
      usage
      exit 0
      ;;
    -v | --version)
      version
      exit 0
      ;;
    -u | --upgrade)
      upgrade='true'
      shift
      ;;
  esac

  local args="$@"
  assert_cluster_json
  assert_required_config
  assert_required_env
  local binary_name
  binary_name="$(get_binary_name)"

  local whalebrew_version="0.1.0"
  if [ "$(whalebrew version)" != "Whalebrew $whalebrew_version" ]; then
    echo "Upgrading whalebrew..."
    curl -L \
      "https://github.com/bfirsh/whalebrew/releases/download/$whalebrew_version/whalebrew-$(uname -s)-$(uname -m)" \
      -o /usr/local/bin/whalebrew && \
      chmod +x /usr/local/bin/whalebrew
  fi

  if [ "$upgrade" == "true" ]; then
    echo "Uninstalling $binary_name from whalebrew"
    whalebrew uninstall "$binary_name" 2> /dev/null
  fi

  if [ -z "$(which "$binary_name" 2> /dev/null)" ]; then
    local whalebrew_image
    if ! whalebrew_image="$(get_whalebrew_image)"; then
      errecho "$whalebrew_image"
      exit 1
    fi
    echo "Installing $whalebrew_image from whalebrew"
    if whalebrew install "$whalebrew_image" --assume-yes; then
      echo "$whalebrew_image installed"
    else
      fatal "Unable to install $whalebrew_image, cowardly refusing to do anything."
    fi
  fi

  if [ -z "$args" ]; then
    echo ''
    usage
    exit 1
  fi

  require_clean_work_tree
  $binary_name $args
}

main "$@"
